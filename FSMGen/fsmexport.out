enum InterfaceCommands
{
	MyNamedCommand = 0,
	TestCommand = 1,
	ThisIsInAWeirdPlace = 2,
};


	FSM::StateMachine<MyClass> FSM;
	void onEnterFSM();
	void onExitFSM();
	FSM::State<MyClass> TestA;
	void onEnterTestA();
	void onExitTestA();
	void onUpdateTestA(float dt);

	FSM::InterfaceCommand<MyClass> TestAOnMyNamedCommand;
	FSM::InterfaceParam::Enum testTestAOnMyNamedCommand(FSM::InterfaceParam* param);
	void execTestAOnMyNamedCommand(FSM::InterfaceParam* param);

	FSM::State<MyClass> SubstateAA;
	void onEnterSubstateAA();
	void onExitSubstateAA();

	FSM::Transition<MyClass> SubstateAAToSubstateAB;
	bool testSubstateAAToSubstateAB();
	void execSubstateAAToSubstateAB();

	FSM::InterfaceTransition<MyClass> SubstateAAToTestBOnMyNamedCommand;
	FSM::InterfaceParam::Enum testSubstateAAToTestBOnMyNamedCommand(FSM::InterfaceParam* param);
	void execSubstateAAToTestBOnMyNamedCommand(FSM::InterfaceParam* param);

	FSM::State<MyClass> SubstateAB;
	void onEnterSubstateAB();
	void onExitSubstateAB();

	FSM::Transition<MyClass> SubstateABToTestB;
	bool testSubstateABToTestB();
	void execSubstateABToTestB();

	FSM::State<MyClass> TestB;
	void onEnterTestB();
	void onExitTestB();

	FSM::State<MyClass> SubstateBA;
	void onEnterSubstateBA();
	void onExitSubstateBA();

	FSM::State<MyClass> SubstateBB;
	void onEnterSubstateBB();
	void onExitSubstateBB();

